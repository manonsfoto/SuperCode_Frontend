describe("calculateWithEmojis", () => {
  it("should return 5, if (2Ô∏è‚É£,‚ûï,3Ô∏è‚É£) is given ", () => {
    const result = calculateWithEmojis("2Ô∏è‚É£", "‚ûï", "3Ô∏è‚É£");
    expect(result).toBe(5);
  });
  it("should return 5, if (7Ô∏è‚É£,‚ûñ,2Ô∏è‚É£) is given ", () => {
    const result = calculateWithEmojis("7Ô∏è‚É£", "‚ûñ", "2Ô∏è‚É£");
    expect(result).toBe(5);
  });
  it("should return 75, if (7Ô∏è‚É£7Ô∏è‚É£,‚ûñ,2Ô∏è‚É£) is given ", () => {
    const result = calculateWithEmojis("7Ô∏è‚É£7Ô∏è‚É£", "‚ûñ", "2Ô∏è‚É£");
    expect(result).toBe(75);
  });
  it("should throw Error, if  (ü§Æ,‚ûï,3Ô∏è‚É£)  is given ", () => {
    expect(() => calculateWithEmojis("ü§Æ", "‚ûï", "3Ô∏è‚É£")).toThrow(
      "1. Parameter konnte nicht in eine Zahl umgewandelt werden."
    );
  });
  it("should throw Error, if  (7Ô∏è‚É£,‚ûñ, ‚ö†Ô∏è)  is given ", () => {
    expect(() => calculateWithEmojis("7Ô∏è‚É£", "‚ûñ", "‚ö†Ô∏è")).toThrow(
      "3. Parameter konnte nicht in eine Zahl umgewandelt werden."
    );
  });
  it("should throw Error, if  (7Ô∏è‚É£,üòµ‚Äçüí´,2Ô∏è‚É£)  is given ", () => {
    expect(() => calculateWithEmojis("7Ô∏è‚É£", "üòµ‚Äçüí´", "2Ô∏è‚É£")).toThrow(
      "2. Parameter konnte nicht in eine Zahl umgewandelt werden."
    );
  });
  it("should return 539, if (7Ô∏è‚É£7Ô∏è‚É£2Ô∏è‚É£,‚ûñ,2Ô∏è‚É£3Ô∏è‚É£3Ô∏è‚É£) is given  ", () => {
    const result = calculateWithEmojis("7Ô∏è‚É£7Ô∏è‚É£2Ô∏è‚É£", "‚ûñ", "2Ô∏è‚É£3Ô∏è‚É£3Ô∏è‚É£");
    expect(result).toBe(539);
  });
});

// ^==============================================

const convertEmojiToNumber = (emoji: string): number => {
  const emojiToNum = Number(
    [...emoji]
      .filter((elt) => {
        const eltToNumber = Number(elt);
        return !isNaN(eltToNumber);
      })
      .join("")
  );

  return emojiToNum;
};

const checkInvalidParameter = (emoji: string, index: number): void => {
  const invalidParam1 = [...emoji].filter((elt) => {
    const eltToNumber = Number(elt);
    return !isNaN(eltToNumber);
  });
  if (invalidParam1.length === 0) {
    throw new Error(
      `${index}. Parameter konnte nicht in eine Zahl umgewandelt werden.`
    );
  }
};

const calculateWithEmojis = (
  emoji1: string,
  operationEmoji: string,
  emoji2: string
): number => {
  checkInvalidParameter(emoji1, 1);
  checkInvalidParameter(emoji2, 3);

  const numEmoji1 = convertEmojiToNumber(emoji1);
  const numEmoji2 = convertEmojiToNumber(emoji2);

  let resultNum: number = 0;
  switch (operationEmoji) {
    case "‚ûï":
      resultNum = numEmoji1 + numEmoji2;
      break;
    case "‚ûñ":
      resultNum = numEmoji1 - numEmoji2;
      break;
    case "‚úñÔ∏è":
      resultNum = numEmoji1 * numEmoji2;
      break;
    case "‚ûó":
      resultNum = numEmoji1 / numEmoji2;
      break;
    default:
      throw new Error(
        `2. Parameter konnte nicht in eine Zahl umgewandelt werden.`
      );
  }
  return resultNum;
};
